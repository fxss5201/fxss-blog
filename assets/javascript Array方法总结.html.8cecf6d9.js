import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c,a as n,b as s,d as t,e as p,r as l}from"./app.37bfe7a1.js";const u={},i=p(`<blockquote><p>阅读提示： 每个方法都有相应的描述、语法、参数、返回值、注意项（可选）、例子（可选）。 语法中的<code>[]</code>里面中的内容表示参数为可选参数。</p></blockquote><h2 id="array-from" tabindex="-1"><a class="header-anchor" href="#array-from" aria-hidden="true">#</a> <code>Array.from()</code></h2><p><strong>描述</strong>：从一个类似数组或可迭代对象中创建一个新的数组实例。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>arrayLike</code>：类似数组或可迭代对象。</li><li><code>callback</code>：新数组中的每个元素都执行的回调函数，效果等同于：<code>Array.from(arrayLike).map(callback(element[, index[, array]])[, thisArg])</code>。 <ol><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li><li><code>thisArg</code>：执行回调函数<code>mapFn</code>时的<code>this</code>对象。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：返回的新数组。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-isarray" tabindex="-1"><a class="header-anchor" href="#array-isarray" aria-hidden="true">#</a> <code>Array.isArray()</code></h2><p><strong>描述</strong>：用于确定传递的值是否是一个数组。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_boolean <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>obj</code>：需要检测的值。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_boolean</code>：如果检测的值是数组，则返回<code>true</code>，否则返回<code>false</code>。</li></ol><h2 id="array-of" tabindex="-1"><a class="header-anchor" href="#array-of" aria-hidden="true">#</a> <code>Array.of()</code></h2><p><strong>描述</strong>：传入可变数量的参数，生成相应的数组。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>element0<span class="token punctuation">[</span><span class="token punctuation">,</span> element1<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token punctuation">,</span> elementN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>element0~elementN</code>：任意个参数，将按顺序成为返回数组中的元素。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：返回的新数组。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [7]</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-concat" tabindex="-1"><a class="header-anchor" href="#array-prototype-concat" aria-hidden="true">#</a> <code>Array.prototype.concat()</code></h2><p><strong>描述</strong>：用于合并两个或多个数组。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>value1<span class="token punctuation">[</span><span class="token punctuation">,</span> value2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token punctuation">,</span> valueN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array/value1~valueN</code>：将数组或者值合并为新的数组。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：返回的新数组。</li></ol><h2 id="array-prototype-copywithin" tabindex="-1"><a class="header-anchor" href="#array-prototype-copywithin" aria-hidden="true">#</a> <code>Array.prototype.copyWithin()</code></h2><p><strong>描述</strong>：复制数组中的一部分值到某个位置，数组长度不变，并返回，会修改原数组。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>target</code>：将复制的值安放的位置，索引以0开始，如果指定负数，将从数组的末尾开始往回算。</li><li><code>start</code>：复制元素的起始位置，索引以0开始，如果指定负数，将从数组的末尾开始往回算。默认值为：0。</li><li><code>end</code>：复制元素的起始位置，索引以0开始，如果指定负数，将从数组的末尾开始往回算。默认值为：<code>old_array.length</code>。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>array</code>：在原数组上复制粘贴，然后将其返回。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="array-prototype-entries" tabindex="-1"><a class="header-anchor" href="#array-prototype-entries" aria-hidden="true">#</a> <code>Array.prototype.entries()</code></h2><p><strong>描述</strong>：返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array_iterator <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array_iterator</code>：一个新的<code>Array</code>迭代器对象。可以通过<code>new_array_iterator.next().value</code>遍历迭代器取得原数组的<code>[key,value]</code>。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// [0, &quot;a&quot;]</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// [1, &quot;b&quot;]</span>

<span class="token keyword">var</span> iterator1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> iterator1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// [0, &quot;a&quot;]</span>
<span class="token comment">// [1, &quot;b&quot;]</span>
<span class="token comment">// [2, &quot;c&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-every" tabindex="-1"><a class="header-anchor" href="#array-prototype-every" aria-hidden="true">#</a> <code>Array.prototype.every()</code></h2><p><strong>描述</strong>：测试数组的所有元素是否都通过了指定函数的测试。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>boolean <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：用来测试每个元素的函数。</li><li><code>thisArg</code>：执行<code>callback</code>时使用的<code>this</code>值。</li></ol><p><strong>返回值</strong>：</p>`,64),r=n("code",null,"boolean",-1),d=n("code",null,"Boolean",-1),k=n("code",null,"every",-1),m=n("code",null,"callback",-1),v=n("code",null,"callback",-1),g=n("code",null,"false",-1),b={href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"Falsy",-1),y=n("code",null,"every",-1),f=n("code",null,"false",-1),_=n("code",null,"callback",-1),j=n("code",null,"true",-1),x=n("code",null,"every",-1),w=n("code",null,"true",-1),q=p(`<p><strong>注意项</strong>：</p><ol><li><code>callback</code>只会为已经被赋值的索引调用，不会被删除或从来没被赋值的索引调用。</li><li><code>every</code>不会改变原数组。</li><li><code>every</code>遍历的元素范围在第一次调用<code>callback</code>之前就已经确定了。在调用<code>every</code>之后新添加到数组中的元素不会被<code>callback</code>访问到。如果数组中存在的元素被更改，则他们传入<code>callback</code>的值是 <code>every</code>访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</li><li>空数组返回<code>true</code>。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-fill" tabindex="-1"><a class="header-anchor" href="#array-prototype-fill" aria-hidden="true">#</a> <code>Array.prototype.fill()</code></h2><p><strong>描述</strong>：用一个固定值填充数组中从起始索引到终止索引之间的全部元素，不包括终止索引。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>value</code>：用来填充数组元素的值。</li><li><code>start</code>：起始索引，索引以0开始，如果指定负数，将从数组的末尾开始往回算。默认值为：0。</li><li><code>end</code>：终止索引，索引以0开始，如果指定负数，将从数组的末尾开始往回算。默认值为：<code>old_array.length</code>。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>array</code>：修改后的数组。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 0, 0, 5]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 0, 0, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-filter" tabindex="-1"><a class="header-anchor" href="#array-prototype-filter" aria-hidden="true">#</a> <code>Array.prototype.filter()</code></h2><p><strong>描述</strong>：创建一个新数组, 其包含通过所提供函数测试的所有元素。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p>`,19),A=n("li",null,[n("code",null,"old_array"),s("：原数组。")],-1),I=n("code",null,"callback",-1),N=n("code",null,"true",-1),V={href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"Truthy",-1),O=n("code",null,"false",-1),R={href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"Falsy",-1),F=n("ol",null,[n("li",null,[n("code",null,"element"),s("：当前在数组中处理的元素。")]),n("li",null,[n("code",null,"index"),s("：当前在数组中处理的元素的索引。")]),n("li",null,[n("code",null,"array"),s("：当前数组。")])],-1),T=n("li",null,[n("code",null,"thisArg"),s("：执行"),n("code",null,"callback"),s("时使用的"),n("code",null,"this"),s("值。")],-1),C=p(`<p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：所有通过测试的元素组成的新数组，如果没有通过测试的元素则返回空数组。</li></ol><p><strong>注意项</strong>：</p><ol><li><code>filter</code>遍历的元素范围在第一次调用<code>callback</code>之前就已经确定了。在调用<code>filter</code>之后新添加到数组中的元素不会被<code>callback</code>访问到。如果数组中存在的元素被更改，则他们传入<code>callback</code>的值是<code>filter</code>访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="array-prototype-find" tabindex="-1"><a class="header-anchor" href="#array-prototype-find" aria-hidden="true">#</a> <code>Array.prototype.find()</code></h2><p><strong>描述</strong>：返回通过测试的函数的第一个元素的值，否则返回<code>undefined</code>。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>elementN <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：用来测试数组的每个元素的函数，直至<code>callback</code>返回<code>true</code>。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回<code>undefined</code>。 <ol><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li><li><code>thisArg</code>：执行<code>callback</code>时使用的<code>this</code>值。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>elementN</code>：通过测试的函数的第一个元素的值，否则返回<code>undefined</code>。</li></ol><p><strong>注意项</strong>：</p><ol><li>空数组返回<code>undefined</code>。</li><li><code>callback</code>函数会为数组中的每个索引调用即从 0 到 length - 1，而不仅仅是那些被赋值的索引（稀疏数组也会全部调用）。</li><li><code>find</code>遍历的元素范围在第一次调用<code>callback</code>之前就已经确定了。在调用<code>find</code>之后新添加到数组中的元素不会被<code>callback</code>访问到。如果数组中存在的元素被更改，则他们传入<code>callback</code>的值是<code>find</code>访问到他们那一刻的值。被删除的元素仍旧会被访问到。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="array-prototype-findindex" tabindex="-1"><a class="header-anchor" href="#array-prototype-findindex" aria-hidden="true">#</a> <code>Array.prototype.findIndex()</code></h2><p><strong>描述</strong>：返回通过测试的函数的第一个元素的索引，否则返回-1。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>number <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：用来测试数组的每个元素的函数，直至<code>callback</code>返回<code>true</code>。当找到了这样一个元素后，该方法会立即返回这个元素的索引，否则返回-1。 <ol><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li><li><code>thisArg</code>：执行<code>callback</code>时使用的<code>this</code>值。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>number</code>：通过测试的函数的第一个元素的索引，否则返回-1。</li></ol><p><strong>注意项</strong>：</p><ol><li>空数组返回-1。</li><li><code>callback</code>函数会为数组中的每个索引调用即从 0 到 length - 1，而不仅仅是那些被赋值的索引（稀疏数组也会全部调用）。</li><li><code>findIndex</code>遍历的元素范围在第一次调用<code>callback</code>之前就已经确定了。在调用<code>findIndex</code>之后新添加到数组中的元素不会被<code>callback</code>访问到。如果数组中存在的元素被更改，则他们传入<code>callback</code>的值是<code>findIndex</code>访问到他们那一刻的值。被删除的元素仍旧会被访问到。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="array-prototype-flat" tabindex="-1"><a class="header-anchor" href="#array-prototype-flat" aria-hidden="true">#</a> <code>Array.prototype.flat()</code></h2><p><strong>描述</strong>：会递归到指定深度将所有子数组连接，并返回一个新数组。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>depth</code>：指定嵌套数组中的结构深度，默认值为1。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：将子数组连接起来的新数组。</li></ol><p><strong>例子</strong>： 一般可用于将多维数组转化为一维数组，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 2, [2, 3]]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 2, 2, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-flatmap" tabindex="-1"><a class="header-anchor" href="#array-prototype-flatmap" aria-hidden="true">#</a> <code>Array.prototype.flatMap()</code></h2><p><strong>描述</strong>：首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与先执行相应的<code>map</code>函数在执行<code>flat()</code>效果相同，除了效率略微高一些。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：可以生成一个新数组中的元素的函数。 <ol><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：一个新的数组，其中每个元素都是回调函数的结果。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr1<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6, 8]</span>
arr1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-foreach" tabindex="-1"><a class="header-anchor" href="#array-prototype-foreach" aria-hidden="true">#</a> <code>Array.prototype.forEach()</code></h2><p><strong>描述</strong>：对数组的每个元素执行一次提供的函数。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>old_array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：为数组中每个元素执行的函数。 <ol><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li></ol><p><strong>返回值</strong>：<code>undefined</code>。</p><p><strong>注意项</strong>：</p><ol><li><code>forEach</code>遍历的元素范围在第一次调用<code>callback</code>之前就已经确定了。在调用<code>forEach</code>之后新添加到数组中的元素不会被<code>callback</code>访问到。如果数组中存在的元素被更改，则他们传入<code>callback</code>的值是<code>forEach</code>访问到他们那一刻的值。被删除的元素将不会被访问到。</li><li>没有办法中止或者跳出<code>forEach</code>循环，除了抛出一个异常。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// 6</span>
<span class="token comment">// 8</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>

<span class="token doc-comment comment">/** 如果数组在迭代时被修改了，则其他元素会被跳过。
 * 数组到two的时候移除第一个元素，所以每个位置上的元素都会往前移动一位，并且当前index为2，所以就得到对应值为four
 */</span>
<span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;No&#39;</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">&#39;. &#39;</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    words<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// No0. one</span>
<span class="token comment">// No1. two</span>
<span class="token comment">// No2. four</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-includes" tabindex="-1"><a class="header-anchor" href="#array-prototype-includes" aria-hidden="true">#</a> <code>Array.prototype.includes()</code></h2><p><strong>描述</strong>：用来判断一个数组是否包含一个指定的值，如果包含则返回<code>true</code>，否则返回<code>false</code>。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>boolean <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>searchElement</code>：需要查找的元素值。</li><li><code>fromIndex</code>：从该索引处开始查找<code>searchElement</code>。如果为负值，则按升序从<code>array.length - fromIndex</code>的索引开始搜索。默认为 0。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>boolean</code>：如果包含则返回<code>true</code>，否则返回<code>false</code>。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-indexof" tabindex="-1"><a class="header-anchor" href="#array-prototype-indexof" aria-hidden="true">#</a> <code>Array.prototype.indexOf()</code></h2><p><strong>描述</strong>：返回在数组中找到给定元素的第一个索引，如果不存在，则返回-1。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>number <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>searchElement</code>：需要查找的元素值。</li><li><code>fromIndex</code>：从该索引处开始查找<code>searchElement</code>。如果为负值，则按升序从<code>array.length - fromIndex</code>的索引开始搜索。默认为 0。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>number</code>：返回在数组中找到给定元素的第一个索引，如果不存在，则返回-1。</li></ol><p><strong>注意项</strong>：</p><ol><li><code>indexOf</code>使用严格等于进行判断（仅当两个操作数的类型相同且值相等才为<code>true</code>）。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-join" tabindex="-1"><a class="header-anchor" href="#array-prototype-join" aria-hidden="true">#</a> <code>Array.prototype.join()</code></h2><p><strong>描述</strong>：将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>string <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>separator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>separator</code>：数组元素组合成字符串时之间的分隔符，默认为<code>,</code>，如不希望使用分隔符，则指定<code>&#39;&#39;</code>。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>string</code>：所有元素连接成的字符串。</li></ol><p><strong>注意项</strong>：</p><ol><li>如果元素是<code>undefined</code>或者<code>null</code>，则会转化成空字符串<code>&#39;&#39;</code>。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// &quot;a,b,c&quot;</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &quot;abc&quot;</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;a-b-c&quot;</span>

<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a,,&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-keys" tabindex="-1"><a class="header-anchor" href="#array-prototype-keys" aria-hidden="true">#</a> <code>Array.prototype.keys()</code></h2><p><strong>描述</strong>：返回一个包含数组中每个索引键的<code>Array Iterator</code>对象。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_iterator <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_iterator</code>：返回一个包含数组中每个索引键的<code>Array Iterator</code>对象。</li></ol><p><strong>注意项</strong>：</p><ol><li>索引迭代器会包含那些没有对应元素的索引。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: 0,done: false}</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: 1,done: false}</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: 2,done: false}</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: undefined,done: true}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sparseKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;0&quot;, &quot;2&quot;]</span>
<span class="token keyword">var</span> denseKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// [0, 1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-lastindexof" tabindex="-1"><a class="header-anchor" href="#array-prototype-lastindexof" aria-hidden="true">#</a> <code>Array.prototype.lastIndexOf()</code></h2><p><strong>描述</strong>：返回从数组中<strong>逆向</strong>找到给定元素的第一个索引，如果不存在，则返回-1。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>number <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>searchElement</code>：需要查找的元素值。</li><li><code>fromIndex</code>：从该索引处开始<strong>逆向</strong>查找<code>searchElement</code>。默认值从<code>array.length - 1</code>，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，则从<code>array.length + fromIndex</code>索引出开始<strong>逆向</strong>查找。如果负值的绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>number</code>：返回从数组中<strong>逆向</strong>找到给定元素的第一个索引，如果不存在，则返回-1。</li></ol><p><strong>注意项</strong>：</p><ol><li><code>lastIndexOf</code>使用严格等于进行判断（仅当两个操作数的类型相同且值相等才为<code>true</code>）。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-map" tabindex="-1"><a class="header-anchor" href="#array-prototype-map" aria-hidden="true">#</a> <code>Array.prototype.map()</code></h2><p><strong>描述</strong>：创建一个新数组，其结果是该数组中的每个元素都调用提供函数后返回的结果。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：原数组中的每个元素都执行的回调函数，然后返回新数组中对应索引处的元素。 <ol><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li><li><code>thisArg</code>：执行回调函数时的<code>this</code>对象。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：<code>callback</code>每次执行后的返回值（包括<code>undefined</code>）组合起来形成一个新数组。</li></ol><p><strong>注意项</strong>：</p><ol><li><code>map</code>遍历的元素范围在第一次调用<code>callback</code>之前就已经确定了。在调用<code>map</code>之后新添加到数组中的元素不会被<code>callback</code>访问到。如果数组中存在的元素被更改，则他们传入<code>callback</code>的值是<code>map</code>访问到他们那一刻的值。从来没被赋过值或被删除的元素将不会被访问到。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 25, 81]</span>

<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, NaN, NaN]</span>
<span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-pop" tabindex="-1"><a class="header-anchor" href="#array-prototype-pop" aria-hidden="true">#</a> <code>Array.prototype.pop()</code></h2><p><strong>描述</strong>：从数组中删除最后一个元素，并返回该元素的值。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>last_element <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>last_element</code>：数组的最后一个元素。</li></ol><p><strong>注意项</strong>：</p><ol><li>在空数组上调用<code>pop()</code>，返回<code>undefined</code>。</li><li><code>Array(7)</code>等稀疏数组上调用<code>pop()</code>，返回<code>undefined</code>。</li><li>此方法会改变原数组。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [9, 10]</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-push" tabindex="-1"><a class="header-anchor" href="#array-prototype-push" aria-hidden="true">#</a> <code>Array.prototype.push()</code></h2><p><strong>描述</strong>：将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array_length <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>elementN</code>：被添加到数组末尾的元素。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array_length</code>：返回数组添加元素之后的新长度。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-reduce" tabindex="-1"><a class="header-anchor" href="#array-prototype-reduce" aria-hidden="true">#</a> <code>Array.prototype.reduce()</code></h2><p><strong>描述</strong>：对数组中的每个元素执行提供的<code>reducer</code>函数(升序执行)，将其结果汇总为单个返回值。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>number <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> element<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：原数组中的每个元素都执行的回调函数。 <ol><li><code>accumulator</code>：上一次调用回调的返回值，或提供的<code>initialValue</code>。</li><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li><li><code>initialValue</code>：用作第一次调用<code>callback</code>的参数值。如果未提供初始值，则将使用数组中的第一个元素。空数组在没有初始值时调用<code>reduce()</code>抛出<code>TypeError</code>。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>number</code>：对数组中的每个元素执行提供的<code>reducer</code>函数(升序执行)，将其结果汇总为单个返回值。</li></ol><p><strong>注意项</strong>：</p><ol><li><code>reduce</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素。</li><li>如果调用<code>reduce</code>时提供了<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>element</code>取数组中的第一个值；如果没有提供<code>initialValue</code>，那么<code>accumulator</code>取数组中的第一个值，<code>element</code>取数组中的第二个值。</li><li>如果没有提供<code>initialValue</code>，<code>reduce</code>会从索引 1 的地方开始执行<code>callback</code>方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引 0 开始。</li><li>如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>，或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</li></ol><p><strong>例子</strong>：（代码注释中的<code>-&gt;</code>表示执行一次的结果）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 -&gt; 1 -&gt; 3 -&gt; 6</span>
  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 -&gt; 10 -&gt; 11 -&gt; 13 -&gt; 16</span>
  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-reduceright" tabindex="-1"><a class="header-anchor" href="#array-prototype-reduceright" aria-hidden="true">#</a> <code>Array.prototype.reduceRight()</code></h2><p><strong>描述</strong>：从右到左对数组中的每个元素执行提供的<code>reduceRight</code>函数，将其结果汇总为单个返回值。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>number <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>previousValue<span class="token punctuation">,</span> element<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：原数组中的每个元素都执行的回调函数。 <ol><li><code>previousValue</code>：上一次调用回调的返回值，或提供的<code>initialValue</code>。</li><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li><li><code>initialValue</code>：用作第一次调用<code>reduceRight</code>的参数值。如果未提供初始值，则将使用数组中的最后一个元素。空数组在没有初始值时调用<code>reduceRight()</code>抛出<code>TypeError</code>。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>number</code>：从右到左对数组中的每个元素执行提供的<code>reduceRight</code>函数，将其结果汇总为单个返回值。</li></ol><p><strong>注意项</strong>：</p><ol><li><code>reduceRight</code>为数组中的每一个元素依次执行<code>callback</code>函数，不包括数组中被删除或从未被赋值的元素。</li><li>如果调用<code>reduceRight</code>时提供了<code>initialValue</code>，<code>previousValue</code>取值为<code>initialValue</code>，<code>element</code>取数组中的最后一个值；如果没有提供<code>initialValue</code>，那么<code>previousValue</code>取数组中的最后一个值，<code>element</code>取数组中的倒数第二个值。</li><li>如果数组仅有一个元素（无论位置如何）并且没有提供<code>initialValue</code>，或者有提供<code>initialValue</code>但是数组为空，那么此唯一值将被返回并且<code>callback</code>不会被执行。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 -&gt; 7 -&gt; 9 -&gt; 10</span>
  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 -&gt; 14 -&gt; 17 -&gt; 19 -&gt; 20</span>
  <span class="token keyword">return</span> accumulator <span class="token operator">+</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-reverse" tabindex="-1"><a class="header-anchor" href="#array-prototype-reverse" aria-hidden="true">#</a> <code>Array.prototype.reverse()</code></h2><p><strong>描述</strong>：将数组中元素的位置颠倒。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：颠倒数组中元素的位置，并返回该数组的引用。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reversed <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reversed: &#39;</span><span class="token punctuation">,</span> reversed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr: &#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-shift" tabindex="-1"><a class="header-anchor" href="#array-prototype-shift" aria-hidden="true">#</a> <code>Array.prototype.shift()</code></h2><p><strong>描述</strong>：从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>first_element <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>first_element</code>：数组中的第一个元素。</li></ol><p><strong>注意项</strong>：</p><ol><li>如果数组的<code>length</code>属性的值为 0 (长度为 0)，则返回<code>undefined</code>。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> shift <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;shift: &#39;</span><span class="token punctuation">,</span> shift<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// one</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr: &#39;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;two&#39;, &#39;three&#39;]</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-slice" tabindex="-1"><a class="header-anchor" href="#array-prototype-slice" aria-hidden="true">#</a> <code>Array.prototype.slice()</code></h2><p><strong>描述</strong>：<code>slice</code>不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>start</code>：从该索引处开始复制原数组中的元素（包含该索引处的值），索引以0开始，如果指定负数，将从数组的末尾开始往回算。默认值为：0。</li><li><code>end</code>：在该索引处结束复制原数组元素（不包含该索引处的值），索引以0开始，如果指定负数，将从数组的末尾开始往回算。默认值为：<code>old_array.length</code>。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：返回浅复制的新数组。</li></ol><p><strong>注意项</strong>：</p><ol><li>如果原数组中当前复制元素是对象引用 （不是实际的对象），<code>slice</code>会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素都会发生改变。</li><li>对于字符串、数字及布尔值来说（不是<code>String</code>、<code>Number</code>或者<code>Boolean</code>对象），<code>slice</code>会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响其他数组。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>arr1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// [[1, 2, 3], 4, 5, 6]</span>
    arr3 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// [[1, 2, 3], 4]</span>
    arr4 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 5]</span>
arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[7, 2, 3], 8, 5, 6]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[7, 2, 3], 4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-some" tabindex="-1"><a class="header-anchor" href="#array-prototype-some" aria-hidden="true">#</a> <code>Array.prototype.some()</code></h2><p><strong>描述</strong>：测试是否至少有一个元素通过提供的函数的测试。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>boolean <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>callback</code>：用来测试数组的每个元素的函数，符合条件则返回<code>true</code>，否则返回<code>false</code>。 <ol><li><code>element</code>：当前在数组中处理的元素。</li><li><code>index</code>：当前在数组中处理的元素的索引。</li><li><code>array</code>：当前数组。</li></ol></li><li><code>thisArg</code>：执行<code>callback</code>时使用的<code>this</code>值。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>boolean</code>：如果至少有一个元素符合条件则返回<code>true</code>，否则返回<code>false</code>。</li></ol><p><strong>注意项</strong>：</p>`,220),U=n("li",null,[s("空数组调用"),n("code",null,"some"),s("方法返回"),n("code",null,"false"),s("。")],-1),B=n("code",null,"some",-1),L=n("code",null,"callback",-1),z=n("code",null,"callback",-1),G=n("code",null,"true",-1),M={href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"Truthy",-1),K=n("code",null,"some()",-1),D=n("code",null,"true",-1),H=n("code",null,"false",-1),J=n("code",null,"callback",-1),P=n("li",null,[n("code",null,"some"),s("遍历的元素范围在第一次调用"),n("code",null,"callback"),s("之前就已经确定了。在调用"),n("code",null,"some"),s("之后新添加到数组中的元素不会被"),n("code",null,"callback"),s("访问到。如果数组中存在的元素被更改，则他们传入"),n("code",null,"callback"),s("的值是"),n("code",null,"some"),s("访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。")],-1),Q=p(`<p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-sort" tabindex="-1"><a class="header-anchor" href="#array-prototype-sort" aria-hidden="true">#</a> <code>Array.prototype.sort()</code></h2><p><strong>描述</strong>：对数组的元素进行排序，并返回数组。默认排序顺序是根据字符串Unicode排序。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span>compareFunction<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>compareFunction</code>：用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode进行排序。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：排序后的数组。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 16, 20, 8]</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 8, 16, 20]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-splice" tabindex="-1"><a class="header-anchor" href="#array-prototype-splice" aria-hidden="true">#</a> <code>Array.prototype.splice()</code></h2><p><strong>描述</strong>：通过删除现有元素和 / 或添加新元素来修改数组，并以数组返回原数组中被删除的内容。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token punctuation">,</span> deleteCount<span class="token punctuation">[</span><span class="token punctuation">,</span> item1<span class="token punctuation">[</span><span class="token punctuation">,</span> item2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>start</code>：从该索引处开始删除现有元素和 / 或添加新元素来修改数组，索引以0开始，如果指定负数，将从数组的末尾开始往回算。默认值为：0。</li><li><code>deleteCount</code>：整数，表示要移除的数组元素的个数。 <ol><li>如果<code>deleteCount</code>是 0或者负数，则不移除元素。这种情况下，至少应添加一个新元素。</li><li>如果<code>deleteCount</code>大于<code>start</code>之后的元素的总数，则从<code>start</code>后面的元素都将被删除（含第<code>start</code>位）。</li><li>如果<code>deleteCount</code>被省略，则其相当于<code>old_array.length - start</code>。</li></ol></li><li><code>itemN</code>：从<code>start</code>索引开始添加进数组的元素。如果不指定，则<code>splice</code>将只删除数组元素。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array</code>：由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [20, 8, 16]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [20, 8]</span>

<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 16]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [20, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#array-prototype-tostring" aria-hidden="true">#</a> <code>Array.prototype.toString()</code></h2><p><strong>描述</strong>：返回一个字符串，表示指定的数组及其元素。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>str</code>：返回一个字符串，表示指定的数组及其元素。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1,20,8,16&quot;</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1,20,10,15,8,16&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-unshift" tabindex="-1"><a class="header-anchor" href="#array-prototype-unshift" aria-hidden="true">#</a> <code>Array.prototype.unshift()</code></h2><p><strong>描述</strong>：将一个或多个元素添加到数组的开头，并返回该数组的新长度。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_array_length <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>elementN</code>：要添加到数组开头的元素。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_array_length</code>：将一个或多个元素添加到数组的开头，并返回该数组的新长度。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    len <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-1, 0, 1, 20, 8, 16]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-prototype-values" tabindex="-1"><a class="header-anchor" href="#array-prototype-values" aria-hidden="true">#</a> <code>Array.prototype.values()</code></h2><p><strong>描述</strong>：返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。</p><p><strong>语法</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>new_iterator <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>：</p><ol><li><code>old_array</code>：原数组。</li><li><code>elementN</code>：要添加到数组开头的元素。</li></ol><p><strong>返回值</strong>：</p><ol><li><code>new_iterator</code>：返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。</li></ol><p><strong>例子</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: &quot;a&quot;,done: false}</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: &quot;b&quot;,done: false}</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: &quot;c&quot;,done: false}</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// {value: undefined,done: true}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52);function X(Y,Z){const a=l("ExternalLinkIcon");return e(),c("div",null,[i,n("ol",null,[n("li",null,[r,s("：返回一个"),d,s("值，"),k,s("方法为数组中的每个元素执行一次"),m,s("函数，直到找到一个使"),v,s("返回"),g,s("或"),n("a",b,[h,t(a)]),s("的元素。如果发现了一个这样的元素，"),y,s("方法将会立即返回"),f,s("。否则，"),_,s("为每一个元素返回"),j,s("，"),x,s("方法才会返回"),w,s("。")])]),q,n("ol",null,[A,n("li",null,[I,s("：用来测试数组的每个元素的函数，返回"),N,s("或"),n("a",V,[E,t(a)]),s("则测试元素会被添加到返回的新数组，"),O,s("或"),n("a",R,[S,t(a)]),s("则不会。 "),F]),T]),C,n("ol",null,[U,n("li",null,[B,s("为数组中的每一个元素执行一次"),L,s("函数，直到找到一个使得"),z,s("返回一个"),G,s("或"),n("a",M,[W,t(a)]),s("。如果找到了这样一个值，"),K,s("将会立即返回 "),D,s("，否则返回"),H,s("。"),J,s("只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。")]),P]),Q])}const sn=o(u,[["render",X],["__file","javascript Array方法总结.html.vue"]]);export{sn as default};
