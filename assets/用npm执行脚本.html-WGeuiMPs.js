import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-CU12uuMY.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p>本文转自 <a href="http://leungwensen.github.io/blog/2016/running-scripts-with-npm.html" target="_blank" rel="noopener noreferrer">用<code>npm</code>执行脚本</a></p><p>大部分<code>npm</code>用户都知道可以在<code>package.json</code>文件中定义<code>npm start</code>或者<code>npm test</code>这样的脚本任务。其实npm的脚本功能远远不止于启动服务器或者执行测试。</p><p>这是一个典型的<code>package.json</code>文件。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义start和test脚本任务</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;death-clock&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;start&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;node server.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;test&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;mocha --reporter spec test&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;mocha&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;^1.17.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这里为讲解需要，我在JSON文件内容中加了注解</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 事实上JSON文件中是不允许有注释的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>start</code>其实是默认脚本任务，内容也默认是<code>node server.js</code>，所以上述配置其实是冗余的。为了能用在<code>test</code>任务中调用<code>mocha</code>，还需要把它作为依赖加到<code>devDependencies</code>这一节下（当然，加到<code>dependencies</code>这一节下也可以，但因为在生产环境中不需要用到，所以放到<code>devDependencies</code>下更合适一些）。</p><p><code>mocha --reporter spec test</code>这句命令之所以能运行，是因为npm会在<code>node_modules/.bin</code>目录下检索相应的脚本文件，而<code>mocha</code>包被安装后，一个名为<code>mocha</code>的脚本也会安装到这个目录下。</p><p><code>mocha</code>项目的<code>package.json</code>配置中的这一段描述了被安装到<code>bin</code>目录下的脚本。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// mocha package.json</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;mocha&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;bin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;mocha&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./bin/mocha&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;_mocha&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./bin/_mocha&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>mocha</code>包定义了两个脚本：<code>mocha</code>和<code>_mocha</code>。</p><p>很多npm包都定义了<code>bin</code>这一节的内容。这一节指定的脚本都可以像<code>mocha</code>一样被npm直接运行。执行<code>ls node_modules/.bin</code>命令就可以知道在当前项目下有哪些npm脚本。</p><h2 id="执行脚本任务" tabindex="-1"><a class="header-anchor" href="#执行脚本任务"><span>执行脚本任务</span></a></h2><p><code>start</code>和<code>test</code>这样的特殊脚本任务都可以直接执行。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 执行&quot;start&quot;指定的脚本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 执行&quot;test&quot;指定的脚本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有其它的脚本任务都必须用<code>npm run</code>来执行。<code>npm run</code>是<code>npm run-script</code>的缩略。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // watch-test starts a mocha watcher that listens for changes</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;watch-test&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;mocha --watch --reporter spec test&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码指定的脚本任务可以通过<code>npm run watch-test</code>来执行，执行<code>npm watch-test</code>则会报错。</p><h2 id="直接执行脚本文件" tabindex="-1"><a class="header-anchor" href="#直接执行脚本文件"><span>直接执行脚本文件</span></a></h2><p>上述例子中执行的脚本任务都定义在<code>package.json中</code>，但这并不是必要条件。<code>npm run</code>可以执行任意<code>node_modules/.bin</code>路径下的脚本。也就是说，除了<code>npm test</code>，我还可以直接通过<code>npm run mocha</code>来执行<code>mocha</code>脚本。</p><h2 id="组合脚本任务" tabindex="-1"><a class="header-anchor" href="#组合脚本任务"><span>组合脚本任务</span></a></h2><p>上述的npm特性已经可以满足大部分场景了，不过有时候我们需要同时完成多项任务。npm也具备这样的能力。<code>npm run</code>其实最后会把脚本任务输出给sh执行，所以理论上我们可以像在命令行中一样组合各种脚本任务。</p><h3 id="管道" tabindex="-1"><a class="header-anchor" href="#管道"><span>管道</span></a></h3><p>假设我们要用<code>browserify</code>打包<code>javascript</code>文件，并且要用<code>uglifyjs</code>进行代码混淆。我只需要用管道（|）把<code>browserify</code>的输出转接给<code>uglifyjs</code>就可以了。非常简单。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// browserify的reactify选项用于处理React语法</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;build-js&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;browserify -t reactify app/js/main.js | uglifyjs -mc &gt; static/bundle.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加必要的依赖项</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;devDependencies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;browserify&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;^3.14.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;reactify&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;^0.5.1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;uglify-js&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;^2.4.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="串行" tabindex="-1"><a class="header-anchor" href="#串行"><span>串行</span></a></h3><p>另一个场景是我们希望当且仅当上一个命令完成后，再执行下一个命令。可以通过串行符号（<code>&amp;&amp;</code>）来实现这个功能，当然，管道（<code>|</code>）也可以实现类似的效果。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 如果build-js，则继续执行build-less</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;build&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;npm run build-js &amp;&amp; npm run build-less&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;build-js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;browserify -t reactify app/js/main.js | uglifyjs -mc &gt; static/bundle.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;build-less&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lessc app/less/main.less static/main.css&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我通过<code>build</code>脚本任务来执行另外两个在<code>package.json</code>中定义的脚本任务。和执行脚本不同之处在于：必须使用<code>npm run</code>来执行其它脚本任务。</p><h3 id="并行" tabindex="-1"><a class="header-anchor" href="#并行"><span>并行</span></a></h3><p>有时候并行地执行多个命令的功能也是必要的。使用并行符号（<code>&amp;</code>）可以把子命令作为后台任务并行执行。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 并行地执行watch-js，watch-less和watch-server</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;watch&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;npm run watch-js &amp; npm run watch-less &amp; npm run watch-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;watch-js&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;watchify app/js/main.js -t reactify -o static/bundle.js -dv&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;watch-less&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;nodemon --watch app/less/*.less --ext less --exec &#39;npm run build-less&#39;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;watch-server&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;nodemon --ignore app --ignore static server.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加必要的依赖项</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;devDependencies&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;watchify&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;^0.6.2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;nodemon&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;^1.0.15&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂脚本" tabindex="-1"><a class="header-anchor" href="#复杂脚本"><span>复杂脚本</span></a></h2><p>如果是更复杂的脚本任务，我通常会写成<code>bash</code>文件，而在<code>package.json</code>中指定为脚本任务。下面是一个脚本实例，这个脚本做的事情是把编译好的资源加到一个发布分支，并且把这个分之推送到Heroku上。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">set</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> errexit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Exit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> error</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> stash</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> save</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Before deploy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Stash</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> all</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> changes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">including</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> untracked</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">before</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> deploy</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> checkout</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> deploy</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> merge</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> master</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">no</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">edit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Merge</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> master</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> branch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> without</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prompting</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">npm</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Generate</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bundled</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Javascript</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> and</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> CSS</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> $</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">am</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Deploy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Commit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> changes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> any</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Changes Committed&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> push</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> heroku</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> deploy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Deploy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Heroku</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> checkout</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> master</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Checkout</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> master</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> again</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> stash</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> pop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> # </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">And</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> restore</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> changes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上<code>package.json</code>的配置后，就可以通过<code>npm run deploy</code>命令执行这个脚本了。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;deploy&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./bin/deploy.sh&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>对于Node而言，npm的存在意义并不止于包管理器。通过合适的配置，我们可以处理绝大部分的脚本需求。</p><p>另一个用npm执行脚本的原因是，只需要配置好<code>start</code>和<code>test</code>，我的项目就可以和Heroku和TravisCI这样的SaaS服务提供商整合起来了。</p>`,38)]))}const d=i(t,[["render",l]]),r=JSON.parse('{"path":"/node/%E7%94%A8npm%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC.html","title":"用npm执行脚本","lang":"zh-CN","frontmatter":{"title":"用npm执行脚本","category":["node"],"tag":["npm"],"date":"2020-06-23T00:00:00.000Z","description":"本文转自 用npm执行脚本 大部分npm用户都知道可以在package.json文件中定义npm start或者npm test这样的脚本任务。其实npm的脚本功能远远不止于启动服务器或者执行测试。 这是一个典型的package.json文件。 start其实是默认脚本任务，内容也默认是node server.js，所以上述配置其实是冗余的。为了能用在...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用npm执行脚本\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-13T07:46:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fxss\\",\\"url\\":\\"https://github.com/fxss5201\\"}]}"],["meta",{"property":"og:url","content":"https://blog.fxss.work/fxss-blog/node/%E7%94%A8npm%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC.html"}],["meta",{"property":"og:site_name","content":"fxss 个人博客"}],["meta",{"property":"og:title","content":"用npm执行脚本"}],["meta",{"property":"og:description","content":"本文转自 用npm执行脚本 大部分npm用户都知道可以在package.json文件中定义npm start或者npm test这样的脚本任务。其实npm的脚本功能远远不止于启动服务器或者执行测试。 这是一个典型的package.json文件。 start其实是默认脚本任务，内容也默认是node server.js，所以上述配置其实是冗余的。为了能用在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-13T07:46:29.000Z"}],["meta",{"property":"article:tag","content":"npm"}],["meta",{"property":"article:published_time","content":"2020-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-13T07:46:29.000Z"}]]},"git":{"createdTime":1668325589000,"updatedTime":1668325589000,"contributors":[{"name":"fxss","username":"fxss","email":"723107234@qq.com","commits":1,"url":"https://github.com/fxss"}]},"readingTime":{"minutes":4.56,"words":1367},"filePathRelative":"node/用npm执行脚本.md","excerpt":"<p>本文转自 <a href=\\"http://leungwensen.github.io/blog/2016/running-scripts-with-npm.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">用<code>npm</code>执行脚本</a></p>\\n<p>大部分<code>npm</code>用户都知道可以在<code>package.json</code>文件中定义<code>npm start</code>或者<code>npm test</code>这样的脚本任务。其实npm的脚本功能远远不止于启动服务器或者执行测试。</p>","autoDesc":true}');export{d as comp,r as data};
