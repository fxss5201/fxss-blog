import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as n}from"./app-DFVC3K8D.js";const r={};function o(p,e){return n(),s("div",null,e[0]||(e[0]=[t('<p>文档首发于 <a href="https://www.fxss.work/guide/strategy.html" target="_blank" rel="noopener noreferrer">泛积木-低代码 使用攻略</a></p><p>我们以大纲的方式（总体把握）讲述如何高效、便捷使用 泛积木-低代码。</p><h2 id="权限" tabindex="-1"><a class="header-anchor" href="#权限"><span>权限</span></a></h2><p>首先说下权限，在 <strong>系统设置</strong> / <strong>权限设置</strong> 菜单内，我们可以新增调整项目内的权限，默认拥有管理员和成员两个权限。</p><p>管理员拥有查看编辑删除所有功能的权限。</p><p>其余权限则需要配置，每个菜单页可以配置 页面访问权限、页面编辑权限、页面删除权限 ，每个菜单目录也可以配置 页面访问权限、页面编辑权限、页面删除权限 。</p><ol><li>页面访问权限：哪些权限人员可以访问该页面；</li><li>页面编辑权限：哪些权限人员可以编辑该页面（可以编辑页面和操作栏内的编辑按钮权限）；</li><li>页面删除权限：哪些权限人员可以删除该页面（可以删除页面和操作栏内的删除按钮权限）。</li></ol><p>只有目录和菜单页都有权限时菜单才会正常展示，<strong>如果目录没访问权限则整个目录中的菜单页都不会显示</strong>。</p><p>在权限控制上面 泛积木-低代码 遵照 只要有访问页面权限的都可以 新增数据，操作栏内的 编辑 按钮权限和 页面编辑权限 挂钩，操作栏内的 编辑 按钮权限和 页面编辑权限 挂钩。如果 新增按钮权限 和 删除按钮权限 想改为和 页面编辑权限挂钩，可以调整为 <code>&quot;visibleOn&quot;: &quot;${pageAccess.editor}&quot;,</code>。</p><p>我们在每个页面内都会注入页面访问、编辑、删除到数据作用域中，我们可以通过 <code>${pageAccess.view}</code>/<code>${pageAccess.editor}</code>/<code>${pageAccess.delete}</code>配置页面内的操作按钮的权限，对于后端接口内的权限控制，我们提供接口 <code>post</code> <code>https://xxx.xxx.xx/codeApi/getPageInfoApi</code> 获取页面基本信息及权限信息，具体的可以查看 <a href="https://www.fxss.work/use/abutment.html#%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener noreferrer">权限控制</a>。</p><p>还有一种比较特殊的权限，就是在页面配置内的页面对外，默认页面都是对内的，对外的页面则不会校验是否拥有访问权限，所有用户都拥有访问权限。</p><p>通过上面的一番操作，我们将权限调整为动态配置，并且像一张大网一样包含覆盖在整个项目内。</p><h2 id="用户管理" tabindex="-1"><a class="header-anchor" href="#用户管理"><span>用户管理</span></a></h2><p>在用户管理内，我们可以控制用户的启用和禁用、以及分配给用户对应的权限，这样上面的权限就可以再映射到用户，最终形成 哪些用户 拥有 哪些页面 的 哪些操作权限 的动态多维权限控制。</p><p><strong>注意：禁用的用户无法登录。</strong></p><h2 id="环境区分" tabindex="-1"><a class="header-anchor" href="#环境区分"><span>环境区分</span></a></h2><p>泛积木-低代码一共有三种格式的链接：</p><h3 id="admin-pagekey-或-outside-pagekey" tabindex="-1"><a class="header-anchor" href="#admin-pagekey-或-outside-pagekey"><span><code>/admin/:pageKey</code> 或 <code>/outside/:pageKey</code></span></a></h3><p><code>/admin/:pageKey</code> 是项目内部的功能页面的正式环境，<code>/outside/:pageKey</code> 是项目对外页面的正式环境。</p><h3 id="admin-page-pagekey" tabindex="-1"><a class="header-anchor" href="#admin-page-pagekey"><span><code>/admin/page/:pageKey</code></span></a></h3><p><code>/admin/page/:pageKey</code> 是项目的测试环境。</p><h3 id="editor-page-pagekey" tabindex="-1"><a class="header-anchor" href="#editor-page-pagekey"><span><code>/editor/page/:pageKey</code></span></a></h3><p><code>/editor/page/:pageKey</code> 是项目的开发环境。</p><p>项目自带的的权限数据、用户数据、数据字典、mock数据、系统配置等会作为全局数据，用于开发、测试、正式环境，数据字典变更的时候要考虑是否影响正式环境，建议数据字典变更的时候通过新增数据字典来实现。</p><p>除了项目自带的功能，其他开发的功能数据如何做不同环境不同数据的区分呢？</p><p>首先我们在项目<code>config.js</code>配置<a href="https://www.fxss.work/config/web.html#axiosbaseurl" target="_blank" rel="noopener noreferrer">axiosBaseURL</a>，针对不同的环境，我们使用不同的 链接前缀，对应不同环境数据源的链接标识。</p><p>在页面内的数据作用域内根据不同环境我们会注入不同的标识，开发环境 <code>pageInfo.isDev</code>，测试环境 <code>pageInfo.isTest</code>，测试环境 <code>pageInfo.isProd</code>。</p><p>然后在页面 json 的配置内我们可以：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;api&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;method&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;get&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;url&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;${pageInfo.isProd ? &#39;正式环境接口地址&#39; : (pageInfo.isTest ? &#39;测试环境接口地址&#39; : &#39;开发环境接口地址&#39;)}&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过不同环境标识请求不同环境的接口地址，来实现环境区分。</p><p><strong>注意：页面内配置接口的时候，只有通过url方式支持，其他简写方式不支持。</strong></p><p>我们可以通过下面的页面更形象的理解：</p><figure><img src="https://www.fxss.work/assets/env-0547188d.png" alt="环境数据" tabindex="0" loading="lazy"><figcaption>环境数据</figcaption></figure><h2 id="开发模式" tabindex="-1"><a class="header-anchor" href="#开发模式"><span>开发模式</span></a></h2><p>泛积木-低代码对于页面提供页面版本的功能，类似于代码分支的功能，举例来说：来新需求暂定 2.0.0 版本，这个时候在需要改动的页面进入页面编辑页也就是开发环境，针对当前正式环境版本（页面配置中选中的版本）创建 2.0.0 版本，直接保存 2.0.0 版本，这个时候就类似于基于 master 分支创建了开发分支。</p><h3 id="版本设置" tabindex="-1"><a class="header-anchor" href="#版本设置"><span>版本设置</span></a></h3><p>在 <strong>代码管理</strong> / <strong>版本设置</strong> 页面将本地版本设置为 2.0.0 版本，类似于将分支切换到开发分支，这个时候开发环境和测试环境都会优先渲染本地版本也就是 2.0.0 版本，在开发环境更新 2.0.0 版本的页面配置，开发完成之后，<strong>测试人员直接将本地版本设置为 2.0.0 版本可以进行测试 2.0.0 版本的需求功能</strong>。</p><p>本地版本保存在浏览器 <code>localStorage</code> 内，设置之后，页面右上角会展示当前设置的本地版本，未设置时所有页面显示的都是页面配置中对应的版本。</p><h3 id="页面版本" tabindex="-1"><a class="header-anchor" href="#页面版本"><span>页面版本</span></a></h3><p>在 <strong>代码管理</strong> / <strong>页面版本</strong> 页面可以查看所有页面的所有版本，我们可以选择某个菜单页的多个版本进行版本对比，选中的第一个作为对比版本，第二个作为可调整版本，对于多个版本并行开发的时候，采用这种方式进行功能合并，或者是在 <strong>代码管理</strong> / <strong>代码比对</strong> 页面进行功能合并，功能合并完成可以点击 页面查看对比 查看最新的功能。在 页面版本 页面我们还可以查看对应版本的代码及页面（建议后端接口也采用版本的方式，这样可以保证多版本的功能保持正常运行，可以正常查看页面功能），以及删除老早之前已经合并过或者已经荒废的版本。</p><p><strong>在<a href="https://aisuda.bce.baidu.com/amis/zh-CN/components/crud#%E5%A2%9E" target="_blank" rel="noopener noreferrer">amis CRUD 增</a>这里描述的是依靠其它位置的弹窗表单实现，实测在单独页面这样确实可以，但如果想在版本对比页面中也正常使用的话，需要将新增弹框按钮的代码配置放置在 CRUD 的 <code>headerToolbar</code> 配置内。</strong></p><h3 id="页面发版" tabindex="-1"><a class="header-anchor" href="#页面发版"><span>页面发版</span></a></h3><p>在 <strong>代码管理</strong> / <strong>页面发版</strong> 页面搜索要发布的版本，比如上面的 2.0.0 版本，选择要发版的页面，点击发版，发版时：页面启用的只会更新版本，禁用的会启用并更新版本，发版页面会自动将其所有的祖先目录启用。在 <strong>代码管理</strong> / <strong>发版历史</strong> 可以查看到已发版的历史，发版记录的详情内可以查看当时的发版信息的具体内容。</p><p>泛积木-低代码通过页面版本的方式提供了类似于代码分支的功能，并提供版本对比、版本发版、发版历史等多种实用功能。</p><h2 id="debug模式" tabindex="-1"><a class="header-anchor" href="#debug模式"><span>debug模式</span></a></h2><p>在开发环境的预览模式下和测试环境，项目会自动打开debug模式（页面右侧中间的按钮），点击之后可以选择某个组件查看组件内部的数据。</p><h2 id="crud生成器" tabindex="-1"><a class="header-anchor" href="#crud生成器"><span>CRUD生成器</span></a></h2><p>对于一些简单的增删改查需求，我们可以直接通过 <strong>系统设置</strong> / <strong>CRUD生成器</strong> 来进行开发，在页面内点击新增或者复制某个相似的配置来进行新增，在新增弹窗内我们配置页面基本信息、数据表信息（用于创建数据库表）、页面搜索项，确认好了之后点击确定即可生成 对应带权限控制的页面配置 以及 数据库表，现成的增删改查功能直接使用，具体的可以查看 <a href="https://www.fxss.work/use/crud.html" target="_blank" rel="noopener noreferrer">CRUD生成器</a>。</p><p>对于一些状态项的管理我们可以通过 <strong>系统设置</strong> / <strong>数据字典</strong> 来进行管理。</p><h2 id="mock数据" tabindex="-1"><a class="header-anchor" href="#mock数据"><span>mock数据</span></a></h2><p>在 <strong>系统设置</strong> / <strong>mock数据</strong> 中我们可以创建 mock数据接口，用于紧急的页面开发。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>泛积木-低代码通过以上的一些创新思路提供更加高效、便捷的开发，助力您更好、更快的实现功能上线。</p><p>上面是对 泛积木-低代码 总纲介绍使用，详情可以查看 <a href="https://www.fxss.work/use/" target="_blank" rel="noopener noreferrer">使用指引</a> 来更全面的了解。</p>',54)]))}const h=a(r,[["render",o]]),g=JSON.parse('{"path":"/fan/strategy.html","title":"泛积木-低代码 使用攻略","lang":"zh-CN","frontmatter":{"title":"泛积木-低代码 使用攻略","isOriginal":true,"category":["泛积木-低代码"],"date":"2023-10-28T00:00:00.000Z","description":"文档首发于 泛积木-低代码 使用攻略 我们以大纲的方式（总体把握）讲述如何高效、便捷使用 泛积木-低代码。 权限 首先说下权限，在 系统设置 / 权限设置 菜单内，我们可以新增调整项目内的权限，默认拥有管理员和成员两个权限。 管理员拥有查看编辑删除所有功能的权限。 其余权限则需要配置，每个菜单页可以配置 页面访问权限、页面编辑权限、页面删除权限 ，每个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛积木-低代码 使用攻略\\",\\"image\\":[\\"https://www.fxss.work/assets/env-0547188d.png\\"],\\"datePublished\\":\\"2023-10-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-28T14:16:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fxss\\",\\"url\\":\\"https://github.com/fxss5201\\"}]}"],["meta",{"property":"og:url","content":"https://blog.fxss.work/fxss-blog/fan/strategy.html"}],["meta",{"property":"og:site_name","content":"fxss 个人博客"}],["meta",{"property":"og:title","content":"泛积木-低代码 使用攻略"}],["meta",{"property":"og:description","content":"文档首发于 泛积木-低代码 使用攻略 我们以大纲的方式（总体把握）讲述如何高效、便捷使用 泛积木-低代码。 权限 首先说下权限，在 系统设置 / 权限设置 菜单内，我们可以新增调整项目内的权限，默认拥有管理员和成员两个权限。 管理员拥有查看编辑删除所有功能的权限。 其余权限则需要配置，每个菜单页可以配置 页面访问权限、页面编辑权限、页面删除权限 ，每个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.fxss.work/assets/env-0547188d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-28T14:16:28.000Z"}],["meta",{"property":"article:published_time","content":"2023-10-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-28T14:16:28.000Z"}]]},"git":{"createdTime":1698502588000,"updatedTime":1698502588000,"contributors":[{"name":"fanyushun","username":"fanyushun","email":"fanyushun@zj.tech","commits":1,"url":"https://github.com/fanyushun"}]},"readingTime":{"minutes":7.72,"words":2317},"filePathRelative":"fan/strategy.md","excerpt":"<p>文档首发于 <a href=\\"https://www.fxss.work/guide/strategy.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">泛积木-低代码 使用攻略</a></p>\\n<p>我们以大纲的方式（总体把握）讲述如何高效、便捷使用 泛积木-低代码。</p>\\n<h2>权限</h2>\\n<p>首先说下权限，在 <strong>系统设置</strong> / <strong>权限设置</strong> 菜单内，我们可以新增调整项目内的权限，默认拥有管理员和成员两个权限。</p>\\n<p>管理员拥有查看编辑删除所有功能的权限。</p>","autoDesc":true}');export{h as comp,g as data};
