import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as r}from"./app-DDDF--fm.js";const n={};function s(o,t){return r(),a("div",null,t[0]||(t[0]=[i('<p>当前开发代码管理大部分使用的都是 git ，使用 git 一大原因主要就是 git 分支足够灵活，但是当多个开发人员维护同一个项目的时候就需要考虑 git 分支的一些管理规范，下面是我个人对 git 分支管理的一些思考和建议。</p><p>项目分支一般包括 master(main) / test / develop / feature ，各分支的功能如下：</p><table><thead><tr><th>分支名称</th><th style="text-align:left;">分支功能</th></tr></thead><tbody><tr><td>master(main)</td><td style="text-align:left;">一般用于发布线上环境的代码分支</td></tr><tr><td>test</td><td style="text-align:left;">一般用于测试环境的代码分支</td></tr><tr><td>develop</td><td style="text-align:left;">一般用于开发环境或者是冒烟测试环境的代码开支</td></tr><tr><td>feature</td><td style="text-align:left;">一般用于功能开发的代码分支，并且每次新功能开发的 feature 分支都应该是从 master(main) 上新开分支</td></tr></tbody></table><h2 id="个人开发" tabindex="-1"><a class="header-anchor" href="#个人开发"><span>个人开发</span></a></h2><p>常用的个人代码分支管理如下（基于每次迭代的功能都是统一上线发布）：</p><figure><img src="https://img.fxss.work/article-163102706100067-production.png" alt="个人代码分支管理" tabindex="0" loading="lazy"><figcaption>个人代码分支管理</figcaption></figure><p>如果每次迭代的功能并不能保证统一上线的话，就需要在一个迭代中创建多个 单一功能模块的 feature 分支，将 单一功能模块的feature 分支合并到 develop 冒烟测试，合并 test 发布测试，合并 master(main) 发布上线。</p><h2 id="多人开发" tabindex="-1"><a class="header-anchor" href="#多人开发"><span>多人开发</span></a></h2><h3 id="多人开发-功能统一上线" tabindex="-1"><a class="header-anchor" href="#多人开发-功能统一上线"><span>多人开发，功能统一上线</span></a></h3><p>当多人开发，并且能保证功能统一上线的话，这个时候依然可以用上面的分支管理方式：<br><img src="https://img.fxss.work/article-163102708900061-production.png" alt="多人开发，功能统一上线" loading="lazy"></p><p>这个时候每个 feature 实际上对应每个人的分支，开发完成后统一合并到 develop 分支进行冒烟测试，再又 develop 合并到 test 分支 发布测试，之后合并 master(main) 分支 发布上线。</p><h3 id="多人开发-功能独立上线" tabindex="-1"><a class="header-anchor" href="#多人开发-功能独立上线"><span>多人开发，功能独立上线</span></a></h3><p>多人开发，功能独立上线常用的代码分支管理如下：</p><figure><img src="https://img.fxss.work/article-16310271920006-production.png" alt="多人开发，功能独立上线" tabindex="0" loading="lazy"><figcaption>多人开发，功能独立上线</figcaption></figure><p>每个 feature 功能分支独立开发，将独立的 feature 分支合并到 develop 分支进行冒烟测试，将独立的 feature 分支合并到 test 分支进行测试，将独立的 feature 分支合并到 master 分支发布上线。</p><p>当然为了防止有些人合错代码，直接发布到线上，可以在 master(main) 分支前加一个 release 分支，将独立的 feature 分支合并到 release 分支发布上线，再由专人将 release 分支合并到 master。</p><figure><img src="https://img.fxss.work/article-163102712000093-production.png" alt="多人开发，功能独立上线" tabindex="0" loading="lazy"><figcaption>多人开发，功能独立上线</figcaption></figure><h3 id="多人开发-有的功能相互依赖-有的独立发布" tabindex="-1"><a class="header-anchor" href="#多人开发-有的功能相互依赖-有的独立发布"><span>多人开发，有的功能相互依赖，有的独立发布</span></a></h3><p>在项目中更多的情况是有的功能相互依赖，有的可以独立发布，这个时候常用的分支管理如下：</p><figure><img src="https://img.fxss.work/article-163102724200068-production.png" alt="多人开发，有的功能相互依赖，有的独立发布" tabindex="0" loading="lazy"><figcaption>多人开发，有的功能相互依赖，有的独立发布</figcaption></figure><p>这个时候 feature-c 和 feature-d 都开发完了，要合并代码到 feature-b 分支，feature-c 先合并，再合并 feature-d 就有可能有冲突，那这个时候冲突怎么解决呢？</p><figure><img src="https://img.fxss.work/article-163102726500062-production.png" alt="多人开发，有的功能相互依赖，有的独立发布，解决冲突" tabindex="0" loading="lazy"><figcaption>多人开发，有的功能相互依赖，有的独立发布，解决冲突</figcaption></figure><p><strong>总之遵守如下的思想去进行代码管理：</strong></p><ol><li>保证代码干净，意思是不能把别人的代码合并到你的分支，你的分支代码可以独立上线</li><li>分支是用来解决问题的，不要嫌分支多</li></ol><p>以上是我个人针对项目分支管理的看法，有不同意见的欢迎评论。</p>',25)]))}const l=e(n,[["render",s]]),d=JSON.parse('{"path":"/git/git%20branch%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E6%80%9D%E8%80%83.html","title":"git branch分支管理思考","lang":"zh-CN","frontmatter":{"title":"git branch分支管理思考","isOriginal":true,"category":["git"],"date":"2021-09-07T00:00:00.000Z","description":"当前开发代码管理大部分使用的都是 git ，使用 git 一大原因主要就是 git 分支足够灵活，但是当多个开发人员维护同一个项目的时候就需要考虑 git 分支的一些管理规范，下面是我个人对 git 分支管理的一些思考和建议。 项目分支一般包括 master(main) / test / develop / feature ，各分支的功能如下： 个人开...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git branch分支管理思考\\",\\"image\\":[\\"https://img.fxss.work/article-163102706100067-production.png\\",\\"https://img.fxss.work/article-163102708900061-production.png\\",\\"https://img.fxss.work/article-16310271920006-production.png\\",\\"https://img.fxss.work/article-163102712000093-production.png\\",\\"https://img.fxss.work/article-163102724200068-production.png\\",\\"https://img.fxss.work/article-163102726500062-production.png\\"],\\"datePublished\\":\\"2021-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2022-11-13T03:44:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fxss\\",\\"url\\":\\"https://github.com/fxss5201\\"}]}"],["meta",{"property":"og:url","content":"https://blog.fxss.work/fxss-blog/git/git%20branch%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E6%80%9D%E8%80%83.html"}],["meta",{"property":"og:site_name","content":"fxss 个人博客"}],["meta",{"property":"og:title","content":"git branch分支管理思考"}],["meta",{"property":"og:description","content":"当前开发代码管理大部分使用的都是 git ，使用 git 一大原因主要就是 git 分支足够灵活，但是当多个开发人员维护同一个项目的时候就需要考虑 git 分支的一些管理规范，下面是我个人对 git 分支管理的一些思考和建议。 项目分支一般包括 master(main) / test / develop / feature ，各分支的功能如下： 个人开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.fxss.work/article-163102706100067-production.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-13T03:44:38.000Z"}],["meta",{"property":"article:published_time","content":"2021-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-13T03:44:38.000Z"}]]},"git":{"createdTime":1668263826000,"updatedTime":1668311078000,"contributors":[{"name":"fxss","username":"fxss","email":"723107234@qq.com","commits":2,"url":"https://github.com/fxss"}]},"readingTime":{"minutes":3.07,"words":921},"filePathRelative":"git/git branch分支管理思考.md","excerpt":"<p>当前开发代码管理大部分使用的都是 git ，使用 git 一大原因主要就是 git 分支足够灵活，但是当多个开发人员维护同一个项目的时候就需要考虑 git 分支的一些管理规范，下面是我个人对 git 分支管理的一些思考和建议。</p>\\n<p>项目分支一般包括 master(main)  / test / develop / feature ，各分支的功能如下：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>分支名称</th>\\n<th style=\\"text-align:left\\">分支功能</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>master(main)</td>\\n<td style=\\"text-align:left\\">一般用于发布线上环境的代码分支</td>\\n</tr>\\n<tr>\\n<td>test</td>\\n<td style=\\"text-align:left\\">一般用于测试环境的代码分支</td>\\n</tr>\\n<tr>\\n<td>develop</td>\\n<td style=\\"text-align:left\\">一般用于开发环境或者是冒烟测试环境的代码开支</td>\\n</tr>\\n<tr>\\n<td>feature</td>\\n<td style=\\"text-align:left\\">一般用于功能开发的代码分支，并且每次新功能开发的 feature 分支都应该是从 master(main) 上新开分支</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{l as comp,d as data};
